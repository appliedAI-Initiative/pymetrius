name: Tests on Windows and MacOS

on: [push, pull_request]

jobs:
  cpu-extra:
    {% raw -%}
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    {%- endraw %}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: [{{cookiecutter.python_version}}]
    {% raw -%}
    steps:
      - name: Cancel previous run
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
    {%- endraw %}
      
      {% if cookiecutter.package_manager == "poetry" %}
      {% raw -%}
      # use poetry and cache installed packages
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        # ugly as hell, but well...
        # see https://github.com/python-poetry/poetry/issues/7611
        run: poetry install --with dev || poetry install --with dev || poetry install --with dev
      - name: Test with pytest
        run: poetry run poe test-subset
      {%- endraw %}
      {% elif cookiecutter.package_manager == "uv" %}
      {% raw -%}
      # use uv package manager
      - name: Install uv
        run: pip install uv
      - uses: actions/cache@v3
        name: Cache dependencies
        with:
          path: ~/.cache/uv
          key: uv-${{ hashFiles('pyproject.toml') }}
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      - name: Test with pytest
        run: uv run poe test-subset
      {%- endraw %}
      {% elif cookiecutter.package_manager == "pixi" %}
      {% raw -%}
      # use pixi package manager
      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.4.1
        with:
          pixi-version: v0.7.0
      - name: Install dependencies
        run: pixi install
      - name: Test with pytest
        run: pixi run poe test-subset
      {%- endraw %}
      {% endif %}
