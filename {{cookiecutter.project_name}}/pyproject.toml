{% if cookiecutter.package_manager == "poetry" %}
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
{% else %}
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]
{% endif %}

# Project configuration and dependencies will be inserted here
# by the post-generation hook based on the selected package manager

[tool.mypy]
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
exclude = "^build/|^docs/"

[tool.doc8]
max-line-length = 1000

[tool.nbqa.exclude]
ruff = "\\.jupyter_cache|jupyter_execute"
mypy = "\\.jupyter_cache|jupyter_execute"


[tool.black]
line-length = 140
target-version = ["py311"]

[tool.ruff]
target-version = "py311"
line-length = 140

[tool.ruff.lint]
select = [
	"ASYNC",
	"B",
	"C4",
	"C90",
	"COM",
	"D",
	"DTZ",
	"E",
	"F",
	"FLY",
	"G",
	"I",
	"ISC",
	"PIE",
	"PLC",
	"PLE",
	"PLW",
	"RET",
	"RUF",
	"RSE",
	"SIM",
	"TID",
	"UP",
	"W",
	"YTT",
]
ignore = [
	"RUF002", # hyphen checks
	"RUF005", # unpacking over concatenation (no point in that rule IMO)
	"SIM108", # if - else is fine
	"E501",   # line too long. black does a good enough job
	"E741",   # variable names like "l". this isn't a huge problem
	"B008",   # do not perform function calls in argument defaults. we do this sometimes
	"B009",   # don't replace getattr with attr access
	"B011",   # assert false. we don't use python -O
	"B028",   # we don't need explicit stacklevel for warnings
	"D100",
	"D101",
	"D102",
	"D103",
	"D104",
	"D105",
	"D107",
	"D200",
	"D203",
	"D213",
	"D401",
	"D402",   # docstring stuff
	"DTZ005", # we don't need that
	# remaining rules from https://github.com/psf/black/blob/main/.flake8 (except W503)
	# this is a simplified version of config, making vscode plugin happy
	"E402",
	"E501",
	"E701",
	"E731",
	"C408",
	"E203",
	# Logging statement uses f-string warning
	"G004",
	# Unnecessary `elif` after `return` statement
	"RET505",
	"D106",    # undocumented public nested class
	"D205",    # blank line after summary (prevents summary-only docstrings, which makes no sense)
	"D212",    # no blank line after """. This clashes with sphinx for multiline descriptions of :param: that start directly after """
	"PLW2901", # overwrite vars in loop
	"B027",    # empty and non-abstract method in abstract class
	"D404",    # It's fine to start with "This" in docstrings
	"D407",
	"D408",
	"D409",    # Ruff rules for underlines under 'Example:' and so clash with Sphinx
	"D400",    # Period at the end of docstring
	"D415",    # Closing punctuation
	"COM812",  # missing trailing comma: With this enabled, re-application of "poe format" chain can cause additional commas and subsequent reformatting
	"RET503",  # no need to return None
	"RET504",  # it is fine to return after creation
	"UP038",   # tuples in isinstance
	"F403", "F405",    # star imports
	"C401",    # generators
	"C901",    # complexity analysis
	"RET504",  # assignment before return can be useful for debugging
	"SIM103",   # forbids multiple returns
	"SIM110",   # requires use of any(...) instead of for-loop
	"G001",     # forbids str.format in log statements
	"E722",     # forbids unspecific except clause
	"SIM105",   # forbids empty/general except clause
	"SIM113",   # wants to enforce use of enumerate
	"E712",     # forbids equality comparison with True/False
	"UP007",    # forbids some uses of Union
	"TID252",   # forbids relative imports
	"B904",     # forces use of raise from other_exception
	"RUF012",   # forbids mutable attributes as ClassVar
	"SIM117",   # forbids nested with statements
	"C400",     # wants to unnecessarily force use of list comprehension
]
unfixable = [
	"F841", # unused variable. ruff keeps the call, but mostly we want to get rid of it all
	"F601", # automatic fix might obscure issue
	"F602", # automatic fix might obscure issue
	"B018", # automatic fix might obscure issue
]
extend-fixable = [
	"F401", # unused import
	"B905", # bugbear
	"W291", # trailing whitespace
]
[tool.ruff.lint.mccabe]
max-complexity = 20


[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D103"]
"docs/**" = ["D103"]
"examples/**" = ["D103"]
"scripts/**" = ["D103"]


[tool.ruff.format]
# configuration to match the Black settings
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true


[tool.poe.env]
PYDEVD_DISABLE_FILE_VALIDATION="1"
# keep relevant parts in sync with pre-commit
[tool.poe.tasks]  # https://github.com/nat-n/poethepoet
test = "pytest tests --cov={{cookiecutter.package_name}} --cov-report=xml --cov-report=term-missing --durations=0 -v --color=yes"
_black_check = "black --check ."
_ruff_check = "ruff check ."
_ruff_check_nb = "nbqa ruff check docs"
_black_format = "black ."
_ruff_format = "ruff check --fix ."
_ruff_format_nb = "nbqa ruff --fix docs"
_toml_sort = "toml-sort pyproject.toml -o pyproject.toml"
_toml_sort_check = "toml-sort --check pyproject.toml"
lint = ["_black_check", "_ruff_check", "_ruff_check_nb", "_toml_sort_check"]
clean-nbs = "python docs/nbstripout.py"
format = ["_ruff_format", "_ruff_format_nb", "_black_format", "_toml_sort"]
_autogen_rst = "python docs/autogen_rst.py"
_sphinx_build = "sphinx-build -W -b html docs docs/_build"
_jb_generate_toc = "python docs/create_toc.py"
_jb_generate_config = "jupyter-book config sphinx docs/"
doc-clean = "rm -rf docs/_build"
doc-generate-files = ["_autogen_rst", "_jb_generate_toc", "_jb_generate_config"]
doc-spellcheck = "sphinx-build -W -b spelling docs docs/_build"
doc-build = ["doc-generate-files", "doc-spellcheck", "_sphinx_build"]
_mypy = "mypy src"
_mypy_nb = "nbqa mypy docs"
type-check = ["_mypy", "_mypy_nb"]

{% if cookiecutter.package_manager == "poetry" %}
[tool.poetry_bumpversion.file."{{cookiecutter.package_name}}/__init__.py"]
{% endif %}
